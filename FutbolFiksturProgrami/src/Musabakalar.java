
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Alican
 */
public class Musabakalar extends javax.swing.JFrame {

    /**
    * Creates new form Musabakalar
    */
    
    private int takimSayisi; //takimSayisi adında int bir değişken tanımladım önceki formlardan veri almak için.
    private String[][] fikstur; //fikstur adında yeni bir çift boyutlu dizi oluşturdum.
    private String[][] takimIsimleri; //takimIsimleri adında çift boyutlu dizi tanımladım önceki formlardan veri almak için.
    private int attigiGol; //deplasman ve ev sahibi takımın attığı gol sayısını hafızada tutmak için.
    private int yedigiGol; //deplasman ve ev sahibi takımın yediği gol sayısını hafızada tutmak için.

    private int deplasmanSkor; //deplasmanSkor adında deplasmanın skorunu kullanıcıdan aldıktan sonra atayacağım bir değişken tanımladım.
    private int evSahibiSkor; //evSahibiSkor adında ev sahibinin skorunu kullanıcıdan aldıktan sonra atayacağım bir değişken tanımladım.
    
    
    public Musabakalar(String[][] takimIsimleri) {
        initComponents();
        setTitle("Müsabakalar"); //formun başlığını belirledim.
        setLocationRelativeTo(null); //Form'un tam ortada olmasını sağlar.
        this.takimIsimleri = takimIsimleri; //this.takimIsimleri = takimIsimleri; ifadesiyle, alınan takimSayisi değeri sınıfın takimIsimi özelliğine atanır.
        this.takimSayisi = takimSayisi;//this.takimSayisi = takimSayisi; ifadesiyle, alınan takimSayisi değeri sınıfın takimSayisi özelliğine atanır.
        fikstur = generateFixture(takimIsimleri); //aşağıda oluşturduğum generateFixture fonksiyonuna takimIsimleri parametresini gönderdim ve sonucu fikstur'e atadım.
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        btn3 = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table1);

        btn3.setText("Puan Tablosu");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        btn1.setText("YENİ MÜSABAKA");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btn2.setText("SONUÇ GİR");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(btn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
        /*DefaultTableModel model = new DefaultTableModel(fikstur,);
        table1.setModel(model);*/
        
        
    }//GEN-LAST:event_formWindowActivated

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        
        
        if (fikstur == null) //fikstur dizisi boş ise yani maç skorları girilmemişse maç skorları eksik hatası verir.
        {
            JOptionPane.showMessageDialog(null, "Maç skorları eksik. Lütfen skorları oluşturun.");
        } 
        else
        {
            boolean isSkorEmpty = false; //skor boşluğu ilk olara false
                for (int i = 0; i < fikstur.length; i++)
                {
                    if (fikstur[i][2].isEmpty() || fikstur[i][3].isEmpty()) //evSahibiSkor veya deplasmanSkor boş ise
                    {
                        isSkorEmpty = true; //skor boşluğunu true yapıyor
                        break;
                    }
                }

                if (isSkorEmpty) //eğer skorlar boş ise skorlar boş olamaz hatası veriyor.
                {
                    JOptionPane.showMessageDialog(null, "Deplasman ve ev skorları boş olamaz.");
                } 
                else 
                {
                    dispose(); //Musabakalar formunu kapatır.
                    PuanTablosu puanTablo = new PuanTablosu(fikstur, takimIsimleri, attigiGol, yedigiGol);//PuanTablosu formuna geçiş yapmak için bir nesne oluşturur ve PuanTablosu formuna parantez içindeki değişkenleri gönderir.
                    puanTablo.setVisible(true); //PuanTablo formunu görünür kılar yani açar.
                }
            }
        
        
        
        
    }//GEN-LAST:event_btn3ActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        fikstur = generateFixture(takimIsimleri); //kullanıcı isterse yeni müsabaka butonundan yeni bir fikstur oluşturabilir, bu satırda generateFixture fonksiyonuna takimIsimleri yeniden yollanıyor ve yeni bir fikstur oluşuyor.
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        
       
            int rowCount = table1.getRowCount(); //Musabakalar formunda bulunan table1'in satır satısını rowCount değişkenine atar.
            fikstur = new String[rowCount][5]; //fikstur dizisi rowCount kadar satırdan ve 5 adet kolondan oluşacak(hafta,evSahibi,deplasman,evSahibiSkor,deplasmanSkor).

            for (int i = 0; i < rowCount; i++) //0'dan satır sayısı kadar dönecek.
            {
                String hafta = table1.getValueAt(i, 0).toString(); //table1'den hafta'yı alır.
                String evSahibi = table1.getValueAt(i, 1).toString(); //table1'den evSahibi'ni alır.
                String deplasman = table1.getValueAt(i, 2).toString(); //table1'den deplasman'ı alır.

               
                String evSahibiSkorStr = JOptionPane.showInputDialog("Hafta " + hafta + " - " + evSahibi + " takımının attığı gol sayısı:"); //yukarıdan aldığı hafta ve evSahibi değişkeni kullanır.
                
                if (evSahibiSkorStr == null || evSahibiSkorStr.isEmpty()) //eğer evSahibiSkor boş ise
                {
                    // Boş değer veya "Cancel" seçildiği için hata ver
                    JOptionPane.showMessageDialog(null, "Gol sayısı boş bırakılamaz. Lütfen tekrar deneyin.");
                    i--; // Bu haftayı tekrar yapmak için i'yi azalt
                    continue;
                }
                evSahibiSkor = Integer.parseInt(evSahibiSkorStr); //eğer evSahibi boş değilse zaten yukarıdaki if işlemine tabi tutulmayacak ve evSahibiSkor'u değişkenine atanır.

                String deplasmanSkorStr = JOptionPane.showInputDialog("Hafta " + hafta + " - " + deplasman + " takımının attığı gol sayısı:"); //yukarıdan aldığı hafta ve deplasman değişkeni kullanır.
                
                if (deplasmanSkorStr == null || deplasmanSkorStr.isEmpty()) //eğer deplasmanSkor boş ise
                {
                    // Boş değer veya "Cancel" seçildiği için hata ver
                    JOptionPane.showMessageDialog(null, "Gol sayısı boş bırakılamaz. Lütfen tekrar deneyin.");
                    i--; // Bu haftayı tekrar yapmak için i'yi azalt
                    continue;
                }
                deplasmanSkor = Integer.parseInt(deplasmanSkorStr); //eğer deplasmanSkor boş değilse zaten yukarıdaki if işlemine tabi tutulmayacak ve deplasmanSkor'u değişkenine atanır.
                
                fikstur[i][0] = hafta; //fikstur dizisi hafta kolonunda olacakları atıyoruz.
                fikstur[i][1] = evSahibi; //fikstur dizisi evSahibi kolonunda olacakları atıyoruz.
                fikstur[i][2] = deplasman; //fikstur dizisi deplasman kolonunda olacakları atıyoruz.
                fikstur[i][3] = Integer.toString(evSahibiSkor); //fikstur dizisi evSahibiSkor kolonunda olacakları atıyoruz.
                fikstur[i][4] = Integer.toString(deplasmanSkor); //fikstur dizisi deplasmanSkor kolonunda olacakları atıyoruz.

                // Tabloya güncellemeleri yansıt
                table1.setValueAt(evSahibiSkor, i, 3);
                table1.setValueAt(deplasmanSkor, i, 4);

                attigiGol = evSahibiSkor; //toplam evSahibi takımının attığı golleri hafızaya atıyoruz.
                yedigiGol = deplasmanSkor; //toplam deplasman takımının attığı golleri hafızaya atıyoruz.
                
            }
            
            
    }//GEN-LAST:event_btn2ActionPerformed
    
     private String [][] generateFixture(String[][] takimIsimleri) {
        
                int takimSayisi = takimIsimleri.length; //takimSayisi değişkeni takimIsimleri dizisinin uzunluğu kadar olacak.
                int matchesPerTeam = takimSayisi / 2;  //bu ifade, verilen takım sayısına bağlı olarak her takımın kaç maç yapacağını belirlemek için kullanılır.
                int totalMatches = (takimSayisi/2)*((takimSayisi-1)*2);
                /*Bu ifade, toplam maç sayısını hesaplamak için kullanılan bir formülü temsil eder.
                İlk olarak, takimSayisi/2 ifadesi ile her bir takımın diğer takımlarla kaç maç yapacağı belirlenir.
                Ardından, takimSayisi-1 ifadesi ile her bir takımın toplamda kaç hafta boyunca maç yapacağı belirlenir
                (takım kendisiyle maç yapmaz). Son olarak, bu iki değer çarpılarak toplam maç sayısı elde edilir. */
                int totalHafta = (takimSayisi-1)*2;
                /*Formülde, takimSayisi-1 ifadesi ile her bir takımın toplamda kaç hafta boyunca maç yapacağı belirlenir
                (takım kendisiyle maç yapmaz). 
                Ardından, bu değer 2 ile çarpılarak toplam hafta sayısı elde edilir. */

                ArrayList<String> takimlar = new ArrayList<>(); //takimlar adında bir arraylist oluşturdum.
                for (int i = 0; i < takimSayisi; i++)
                {
                    takimlar.add(takimIsimleri[i][0]); //takimIsimleri'ni takimlar adlı arraylist'e ekledim.
                }

                // Fikstürü oluştur
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("Hafta"); //hafta kolununu ekler.
                model.addColumn("Ev Sahibi"); //ev sahibi kolununu ekler.
                model.addColumn("Deplasman"); //deplasman kolununu ekler.
                model.addColumn("Ev Sahibi Skor"); //ev sahibi skor kolununu ekler.
                model.addColumn("Deplasman Skor"); //deplasman skor kolununu ekler.

                Random random = new Random(); //random fonksiyonunu tanımladım.

                int week = 1; //hafta 1 ile başlayacak.
                int matchCount = 0; //yapılan maç başlangıçta 0.
                Set<String> usedMatches = new HashSet<>();
                /*bu ifade ile kullanılan maçların takip edildiği bir küme oluşturdum,
                fikstür oluşturma sürecinde kullanılan maçların tekrarlanmamasını sağlamak için */

                while (matchCount < totalMatches) //yapılan maç sayısı total maçtan küçük olduğu sürece
                {
                    Collections.shuffle(takimlar); //takimlar adlı bir listeyi karıştırdım.

                    for (int i = 0; i < matchesPerTeam; i++)
                    {
                        String evSahibi = takimlar.get(i); //evSahibi değişkenine, takimlar listesindeki i indeksine karşılık gelen takım atanır. 
                        String deplasman = takimlar.get(i + matchesPerTeam); //deplasman değişkenine ise, takimlar listesindeki i + matchesPerTeam indeksine karşılık gelen takım atanır.
                        String matchKey = evSahibi + "-" + deplasman; 
                        /*matchKey değişkeni, ev sahibi ve deplasman takımlarının kombinasyonunu temsil eder.
                        Bu kombinasyon, daha önce kullanılmış maçlar kontrolü için kullanılır.*/

                        if (!usedMatches.contains(matchKey)) //Eğer usedMatches kümesi, matchKey değerini içermiyorsa, yani bu kombinasyonda daha önce bir maç yapılmamışsa, yeni bir maç oluşturulur.
                        {
                            // Rastgele skorlar oluştur
                            /*int evSahibiSkor = random.nextInt(5); // 0-4 arası rastgele bir skor
                            int deplasmanSkor = random.nextInt(5); // 0-4 arası rastgele bir skor*/

                            model.addRow(new Object[]{week, evSahibi, deplasman}); //model.addRow kullanılarak fikstüre eklenir.

                            usedMatches.add(matchKey); //usedMatches kümesine, matchKey değeri eklenir.
                            matchCount++; //matchCount bir arttırılır. Bu, yapılan maç sayısını takip eder.
                        } 
                        else
                        {
                            // Tekrar eden maçta yeni bir ev sahibi ve deplasman takımı üret
                            Collections.shuffle(takimlar); //takimlar adlı bir listeyi karıştırdım.
                            i--; // Yeni eşleşme için tekrar kontrol et
                        }
                    }

                    week++; //haftayı bir arttırdım.
                }

                table1.setModel(model); //model'i table1'e gönderdim.
                return fikstur;
       
                
     }          
        

    /**
     * @param args the command line arguments
     */
    
    public static void main(String[][] takimIsimleri,int takimSayisi) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Musabakalar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Musabakalar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Musabakalar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Musabakalar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Musabakalar(takimIsimleri).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables

    
}

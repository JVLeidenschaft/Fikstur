
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author Alican
 */
public class PuanTablosu extends javax.swing.JFrame {

    /**
     * Creates new form PuanTablosu
     */
    private String[][] fikstur; //fikstur adında yeni bir çift boyutlu dizi oluşturdum.
    private String[][] takimIsimleri; //takimIsimleri adında çift boyutlu dizi tanımladım önceki formlardan veri almak için.
    private String[] basliklar = {"Takım", "Galibiyet", "Beraberlik", "Mağlubiyet",
                "Attığı Gol", "Yediği Gol", "Averaj", "Puan"}; //tablo başlıkları için dizi oluşturdum.
    private int takimSayisi; //takimSayisi adında int bir değişken tanımladım önceki formlardan veri almak için.
    
    private String[][] puanTablosu; //puan tablosu için bir çift boyutlu dizi oluşturdum.
    private String takimAdi; //tabloda olucak takım adi için
    private int galibiyet; //tabloda olucak galibiyet adi için
    private int beraberlik; //tabloda olucak beraberlik adi için
    private int maglubiyet; //tabloda olucak maglubiyet adi için
    private int attigiGol; //tabloda olucak attigiGol adi için
    private int yedigiGol; //tabloda olucak yedihiGol adi için
    
   
    public PuanTablosu(String[][] fikstur, String[][] takimIsimleri,int attigiGol,int yedigiGol) {
        initComponents();
        setTitle("Takımların Puanları ve Sıralaması"); //formun başlığını belirledim.
        setLocationRelativeTo(null); //Form'un tam ortada olmasını sağlar.
        this.takimIsimleri = takimIsimleri; //this.takimIsimleri = takimIsimleri; ifadesiyle, alınan takimSayisi değeri sınıfın takimIsimi özelliğine atanır.
        this.takimSayisi = takimSayisi; //this.takimSayisi = takimSayisi; ifadesiyle, alınan takimSayisi değeri sınıfın takimSayisi özelliğine atanır.
        this.fikstur= fikstur; //this.fikstur = fikstur; ifadesiyle, alınan fikstur değeri sınıfın fikstur özelliğine atanır.
        this.attigiGol = attigiGol; //this.attigiGol = attigiGol; ifadesiyle, alınan takimSayisi değeri sınıfın attigiGol özelliğine atanır.
        this.yedigiGol = yedigiGol; //this.yedigiGol = yedigiGol; ifadesiyle, alınan takimSayisi değeri sınıfın yedigiGol özelliğine atanır.
        
    } 
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(400, 150));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

            // Puan tablosunu oluşturma
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(new Object[]{"Takım", "Galibiyet", "Beraberlik", "Mağlubiyet", "Attığı Gol", "Yediği Gol", "Averaj", "Puan"});

            // Takım istatistiklerini hesaplama
            for (int i = 0; i < fikstur.length; i++)
            {
                String evSahibi = fikstur[i][1];
                String deplasman = fikstur[i][2];
                int evSkor = Integer.parseInt(fikstur[i][3]);
                int depSkor = Integer.parseInt(fikstur[i][4]);

                // Ev sahibi takımın istatistiklerini güncelleme
                boolean evSahibiEklendi = false;
                for (int j = 0; j < model.getRowCount(); j++)
                {
                    if (model.getValueAt(j, 0).equals(evSahibi))
                    {
                        int galibiyet = Integer.parseInt(model.getValueAt(j, 1).toString());
                        int beraberlik = Integer.parseInt(model.getValueAt(j, 2).toString());
                        int maglubiyet = Integer.parseInt(model.getValueAt(j, 3).toString());
                        int attigiGol = Integer.parseInt(model.getValueAt(j, 4).toString());
                        int yedigiGol = Integer.parseInt(model.getValueAt(j, 5).toString());

                        attigiGol += evSkor;
                        yedigiGol += depSkor;

                        if (evSkor > depSkor)
                        {
                            galibiyet++;
                        } else if (evSkor < depSkor)
                        {
                            maglubiyet++;
                        } else
                        {
                            beraberlik++;
                        }

                        int averaj = attigiGol - yedigiGol;
                        int puan = (galibiyet * 3) + beraberlik;

                        model.setValueAt(galibiyet, j, 1);
                        model.setValueAt(beraberlik, j, 2);
                        model.setValueAt(maglubiyet, j, 3);
                        model.setValueAt(attigiGol, j, 4);
                        model.setValueAt(yedigiGol, j, 5);
                        model.setValueAt(averaj, j, 6);
                        model.setValueAt(puan, j, 7);

                        evSahibiEklendi = true;
                        break;
                    }
                }

                if (!evSahibiEklendi)
                {
                    int galibiyet = (evSkor > depSkor) ? 1 : 0;
                    /*Eğer koşul doğru ise (evSkor deplasman skorundan büyük ise), galibiyet değişkenine 1 atanır.
                      Eğer koşul yanlış ise (evSkor deplasman skorundan küçük veya eşit ise), galibiyet değişkenine 0 atanır.*/
                    int beraberlik = (evSkor == depSkor) ? 1 : 0;
                    int maglubiyet = (evSkor < depSkor) ? 1 : 0;
                    int attigiGol = evSkor;
                    int yedigiGol = depSkor;
                    int averaj = attigiGol - yedigiGol;
                    int puan = (galibiyet * 3) + beraberlik;

                    model.addRow(new Object[]{evSahibi, galibiyet, beraberlik, maglubiyet, attigiGol, yedigiGol, averaj, puan});
                }

                // Deplasman takımın istatistiklerini güncelleme
                boolean deplasmanEklendi = false;
                for (int j = 0; j < model.getRowCount(); j++) 
                {
                    if (model.getValueAt(j, 0).equals(deplasman)) 
                    {
                        int galibiyet = Integer.parseInt(model.getValueAt(j, 1).toString());
                        int beraberlik = Integer.parseInt(model.getValueAt(j, 2).toString());
                        int maglubiyet = Integer.parseInt(model.getValueAt(j, 3).toString());
                        int attigiGol = Integer.parseInt(model.getValueAt(j, 4).toString());
                        int yedigiGol = Integer.parseInt(model.getValueAt(j, 5).toString());

                        attigiGol += depSkor;
                        yedigiGol += evSkor;

                        if (depSkor > evSkor) 
                        {
                            galibiyet++;
                        } else if (depSkor < evSkor)
                        {
                            maglubiyet++;
                        } else
                        {
                            beraberlik++;
                        }

                        int averaj = attigiGol - yedigiGol;
                        int puan = (galibiyet * 3) + beraberlik;

                        model.setValueAt(galibiyet, j, 1);
                        model.setValueAt(beraberlik, j, 2);
                        model.setValueAt(maglubiyet, j, 3);
                        model.setValueAt(attigiGol, j, 4);
                        model.setValueAt(yedigiGol, j, 5);
                        model.setValueAt(averaj, j, 6);
                        model.setValueAt(puan, j, 7);

                        deplasmanEklendi = true;
                        break;
                    }
                }

                if (!deplasmanEklendi)
                {
                    int galibiyet = (depSkor > evSkor) ? 1 : 0;
                    /*Eğer koşul doğru ise (depSkor ev sahibi skorundan büyük ise), galibiyet değişkenine 1 atanır.
                    Eğer koşul yanlış ise (depSkor ev sahibi skorundan küçük veya eşit ise), galibiyet değişkenine 0 atanır.*/
                    int beraberlik = (depSkor == evSkor) ? 1 : 0;
                    int maglubiyet = (depSkor < evSkor) ? 1 : 0;
                    int attigiGol = depSkor;
                    int yedigiGol = evSkor;
                    int averaj = attigiGol - yedigiGol;
                    int puan = (galibiyet * 3) + beraberlik;

                    model.addRow(new Object[]{deplasman, galibiyet, beraberlik, maglubiyet, attigiGol, yedigiGol, averaj, puan});
                }
            }
          
          
            // Tabloyu puanlara göre sıralama
            List<Object[]> rowDataList = new ArrayList<>();

            // Tablodaki verileri Object[] dizilere dönüştürme
            for (int i = 0; i < model.getRowCount(); i++)
            {
                Object[] rowData = new Object[model.getColumnCount()];
                for (int j = 0; j < model.getColumnCount(); j++)
                {
                    rowData[j] = model.getValueAt(i, j);
                }
                rowDataList.add(rowData);
            }

            // Puanlara göre sıralama
            Collections.sort(rowDataList, new Comparator<Object[]>() 
            {
                public int compare(Object[] rowData1, Object[] rowData2) 
                {
                    Integer puan1 = Integer.parseInt(rowData1[7].toString());
                    Integer puan2 = Integer.parseInt(rowData2[7].toString());
                    return puan2.compareTo(puan1); // Büyükten küçüğe doğru sıralama
                }
            });

            // Sıralanmış verileri tabloya ekleme
            model.setRowCount(0); // Mevcut satırları temizleme

            for (Object[] rowData : rowDataList) 
            {
                model.addRow(rowData);
            }

            // Puan tablosunu table1'e atama
            table1.setModel(model);
            
            
            
    }//GEN-LAST:event_formWindowActivated
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[][]takimIsimleri,String[][]fikstur,String[]basliklar,int attigiGol, int yedigiGol) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PuanTablosu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PuanTablosu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PuanTablosu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PuanTablosu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PuanTablosu(fikstur,takimIsimleri,attigiGol,yedigiGol).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}
